---
# The high-level description of your tile.
# Replace these properties with real values.
#
name: ecs-broker-tile # By convention lowercase with dashes
icon_file: resources/icon.png
label: DELL EMC ECS Broker
description: ECS Broker for Pivotal CF
metadata_version: 1.8                 # Optional, defaults to 1.8
rank: 2

# Global defaults (all optional)
#
# org: test-org                         # Name of org to create for your apps
# space: test-space                     # Name of space to create for your apps
# apply_open_security_group: true       # Apply open security group, default: false

# Specify the packages to be included in your tile.
# The format of the section to include depends on the type
# of package you are describing. For fragments of each type
# that you can copy & paste, see:
#
# http://docs.pivotal.io/tiledev/tile-generator.html
#
packages:
- name: ecs-broker #(( .properties.app_name ))
  type: app-broker
  label: ECS Broker Application      # Package name for use in human-readable labels in OpsManager
  manifest:
    path: resources/ecs-cf-service-broker-1.1.0.jar
    buildpack: java_buildpack_offline
    memory: 1G
    env:
      BROKER_REPOSITORY_SERVICE_ID: f3cbab6a-5172-4ff1-a5c7-72990f0ce2aa
      BROKER_REPOSITORY_PLAN_ID: 8e777d49-0a78-4cf4-810a-b5f5173b019d
#      BROKER_MANAGEMENT_ENDPOINT:   (( .properties.management_endpoint.value ))
#      BROKER_REPLICATION_GROUP:     (( .properties.replication_group.value ))
#      BROKER_NAMESPACE:             (( .properties.namespace.value ))
#      BROKER_API_USERNAME:          (( .properties.api_username.value ))
#      BROKER_API_PASSWORD:          (( .properties.api_password.value ))
#      BROKER_BASE_URL:              (( .properties.base_url.value || "" ))
#      BROKER_OBJECT_ENDPOINT:       (( .properties.object_endpoint.value ))
#      BROKER_BROKER_API_VERSION:    "*"
#      BROKER_PREFIX:                (( .properties.prefix.value ))
#      BROKER_REPOSITORY_ENDPOINT:   (( .properties.repository_endpoint.value || "" ))
#      BROKER_REPOSITORY_USER:       (( .properties.repository_user.value || "" ))
#      BROKER_REPOSITORY_BUCKET:     (( .properties.repository_bucket.value || "" ))

# Include stemcell criteria if you don't want to accept the default.
# Since this stemcell is only used to run pre and post errands, we
# strongly recommend you leave this alone so that your tile always
# runs with the latest stemcell.
#
# stemcell_criteria:
#   os: ubuntu-trusty
#   requires_cpi: false
#   version: '3062'

# Add properties you want to pass to your applications.
# Properties specified here will not be configurable by the user.
#
# properties:
# - name: example_property
#   type: string
#   default: specify a value
#   label: Label for the field on the GUI
#   description: Longer description of the field's purpose

# Uncomment this section if you want to display forms with configurable
# properties in Ops Manager. These properties will be passed to your
# applications as environment variables. You can also refer to them
# elsewhere in this template by using:
#     (( .properties.<property-name> ))
#
forms:
- name: ecs_broker_app
  label: Service Broker Application
  description: Service Broker CF App Configuration Details
  properties:
    - name: app_name
      type: string
      label: Service Broker Application Name
      description: Enter the name for the Service Broker App
      configurable: true
      default: ecs-broker
# TODO: Migrate app_uri to become the app_name
    - name: enable_global_access_to_plans
      label: Enable Global access to all Services and Plans
      description: Open up access to all service plans across all orgs and spaces. If set to false, administrators must use the "enable-service-access" command to allow access
      type: boolean
      configurable: true
      default: true
- name: ecs_connection
  label: Dell EMC ECS Connectivity
  description: Service Broker ECS Connection Details
  properties:
    - name: broker_management_endpoint
      label: ECS Management Endpoint
      description: Enter the URI/endpoint for the ECS HTTPS management API. This is typically accessed from port `4443`, but may be on a different port if accessed through a load balancer
      type: string
      configurable: true
    - name: broker_replication_group
      label: Replication Group
      description: Enter the name of the ECS "replication group" to be used for created buckets. This can be found in the ECS management UI
      type: string
      configurable: true
    - name: broker_namespace
      label: Namespace
      description: Enter the name of the ECS "namespace" to be used for created buckets and users. This can be found in the ECS management UI
      type: string
      configurable: true
    - name: broker_username
      label: ECS Admin Username
      description: Enter the name of the ECS Management API admin user. This should be a namespace admin or system administrator management user on the ECS
      type: string
      configurable: true
    - name: broker_password
      label: ECS Admin Password
      description: Enter the ECS Management API password
      type: string
      configurable: true
    - name: broker_base_url
      label: ECS Base URL
      description: (Optional) Enter the name of the ECS configured base URL, to discover the object endpoint. If not provided, the broker will attempt to discover a default base URL. Alternatively, the URI/endpoint can be specified using the "Object Endpoint" parameter
      type: string
      configurable: true
      optional: true
    - name: certificate_selector
      label: Is the ECS SSL certificate is signed by a trust authority?
      description: If the ECS does not have a properly signed certificate from a trust authority (a self-signed certificate, for example), then customers will need to provide the SSL certificate.
      default: "No"
      configurable: true
      type: selector
      option_templates:
      - name: untrusted_ssl
        select_value: "No"
        property_blueprints:
        - name: broker_certificate
          label: ECS Management Certificate
          description: SSL certificate to enable broker to communicate with ECS API Managment. This is required for self-signed certificates, but may not be needed when the ECS is configured with a signed certificate from a trusted source
          type: text
          configurable: true
          optional: true
      - name: trusted_ssl
        select_value: "Yes"
        property_blueprints: []
    - name: broker_object_endpoint
      label: ECS Object Endpoint
      description: (Optional) Manually specify the URI/endpoint of the ECS S3 API, rather than discover from the ECS configured "base URL". This is typically accessed form port 9020 (HTTP) or port 9021 (HTTPS), but may be on a different port if accessed through a load balancer
      type: string
      configurable: true
      optional: true
- name: broker_service_details
  label: Service Broker Webservice Settings
  description: Service Broker Webservice Settings
  properties:
    - name: broker_prefix
      label: Broker Prefix
      description: (Optional) Enter a string used to prefix all broker created buckets and users. Defaults to "ecs-cf-broker-"
      type: string
      configurable: true
      optional: true
    - name: broker_repository_endpoint
      label: Repository Endpoint
      description: (Optional) Enter the URI/endpoint for the ECS S3 API that should be used for storing broker metadata.  Defaults to the object endpoint or base URL
      type: string
      configurable: true
      optional: true
    - name: broker_repository_user
      label: Repository User
      description: (Optional) Enter the name of the user that should be created/used for managing broker metadata. Defaults to "{prefix}-user"
      type: string
      configurable: true
      optional: true
    - name: broker_repository_bucket
      label: Repository Bucket
      description: (Optional) Enter the name of the bucket that should be created/used for managing broker metadata. Defaults to {prefix}-repository
      type: string
      configurable: true
      optional: true


# If prior versions of your tile are installed and configured, their
# property values will not be overwritten by new defaults provided
# in this file. If that is your intent, you must do the overwriting
# explicitly using JavaScript migration functions, like so:
#
# migration: |
#   properties['properties']['.properties.org']['value'] = 'system';
